{# /app/views/_includes/fake-images.njk #}

<div class="nhsuk-u-margin-bottom-4">

  {# Convert object to an array of views #}
  {% set mammogramViews = event.mammogramData.views | getObjectValues %}

  {# Group views by view name so we get MLO or CC only #}
  {% set groupedViews = mammogramViews | groupby("viewShort") %}

  {# Iterate through each view - they should be in a set / known order #}
  {# Todo: this won't handle cases where entire views are missing - should we iterate
  through a hardcoded list and show gaps where there are any? #}
  {% for viewName, view in groupedViews %}

    {# General view name - "MLO views" #}
    {% set viewNameString %}
      {{ viewName }} views
    {% endset %}

    {# Capture html for entire view #}
    {% set viewCardHtml %}

      {# Right then left #}
      {% for side in view %}
        <div class="{{ 'nhsuk-u-margin-bottom-3' if not loop.last }}">
          {# 1 RCC image | 2 LMLO images, etc #}
          <h2>
            {{ side.images | length }} {{ side.viewShortWithSide }} {{ "images" | pluralise(side.images | length) }}
          </h2>

          {# Loop through each image for each side #}
          {% for image in side.images %}
            <div class="nhsuk-grid-row {{ 'nhsuk-u-margin-bottom-3' if not loop.last }}">
              <div class="nhsuk-grid-column-three-quarters">
                {{ summaryList({
                  classes: "nhsuk-u-margin-bottom-0",
                  rows: [
                    {
                      key: {
                        text: "Captured"
                      },
                      value: {
                        text: image.timestamp | formatDateTime("D MMMM YYYY, H:mm:ss a")
                      }
                    },
                    {
                      key: {
                        text: "Accession"
                      },
                      value: {
                        html: image.accessionNumber
                      }
                    }
                  ]
                }) }}
              </div>
              {# Small graphic of mammogram #}
              <div class="nhsuk-grid-column-one-quarter">
                <div class="app-mammogram-image--placeholder">
                  {# <img class="nhsuk-image__img {{ 'app-image-flip-horizontal' if side.side == 'right' }}" src="/images/mammograms/nci-vol-9405-72.jpg" alt="Mammogram image"> #}
                  <img class="nhsuk-image__img" src="/images/mammogram-diagrams/{{ side.viewShortWithSide }}.png" alt="">
                </div>
              </div>
            </div>

          {# If there are no images, show inset text - likely partial mammography #}
          {% else %}
            {% set insetHtml %}
              <p>There are no {{ side.viewShortWithSide }} images</p>
            {% endset %}
            {{ insetText({
              html: insetHtml
            }) }}
          {% endfor %}

          {# If there are multiple images for a side, show UI for repeats #}
          {# Todo: during capture this should be a radio, later it should  #}
          {% if side.images | length > 1 %}

            <div class="nhsuk-grid-row">
              <div class="nhsuk-grid-column-two-thirds nhsuk-u-margin-top-3">
                {% set repeatReasonHtml %}
                  {{ input({
                    label: {
                      text: "Repeat reason"
                    },
                    id: "repeatReason-" + side.viewShortWithSide,
                    name: "eventTemp[mammogramData][repeatReason-" + side.viewShortWithSide + "]",
                    value: data.eventTemp.mammogramData["repeatReason-" + side.viewShortWithSide]
                  }) }}
                {% endset %}

                {{ radios({
                  idPrefix: "isRepeatQuestion-" + side.viewShortWithSide,
                  name: "eventTemp[mammogramData][isRepeatQuestion-" + side.viewShortWithSide + "]",
                  fieldset: {
                    legend: {
                      text: "Why are there multiple " + side.viewShortWithSide + " images?",
                      classes: "nhsuk-fieldset__legend--s",
                      isPageHeading: false
                    }
                  },
                  value: data.eventTemp.mammogramData["isRepeatQuestion-" + side.viewShortWithSide],
                  items: [
                    {
                      value: "isRepeat",
                      text: "A repeat was needed",
                      conditional: {
                        html: repeatReasonHtml
                      }
                    },
                    {
                      value: "extraImages",
                      text: "Additional images were required to capture complete view"
                    }
                  ]
                }) }}
              </div>
            </div>

          {% endif %}
        </div>

      {% endfor %}

    {% endset %}

    {{ card({
      heading: viewNameString | sentenceCase,
      headingLevel: "2",
      feature: true,
      descriptionHtml: viewCardHtml
    }) }}
  {% endfor %}
</div>


{% block pageScripts %}
  {% if animateImages %}
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const loadingSpinner = document.getElementById('loading-spinner')
        const imageCards = document.querySelectorAll('.app-image-card')
        const imagingForm = document.getElementById('imaging-form')

        // Hide spinner after initial delay
        setTimeout(() => {
          loadingSpinner.classList.add('app-hidden')

          // Show each image sequentially
          imageCards.forEach((card, index) => {
            // Increased time between images to 2 seconds
            const loadTime = 1000 + (index * 2000)

            setTimeout(() => {
              card.classList.remove('app-hidden')
              card.style.opacity = 0
              card.style.transition = 'opacity 0.5s ease-in'
              setTimeout(() => card.style.opacity = 1, 50)

              // Show form at same time as first image
              if (index === 0) {
                imagingForm.classList.remove('app-hidden')
                imagingForm.style.opacity = 0
                imagingForm.style.transition = 'opacity 0.5s ease-in'
                setTimeout(() => imagingForm.style.opacity = 1, 50)
              }
            }, loadTime)
          })
        }, 1000)
      })
      </script>
  {% endif %}

{% endblock %}
